From a59a854b953c3789c4fd0911fe939171b25e35bd Mon Sep 17 00:00:00 2001
From: Yu Watanabe <watanabe.yu+github@gmail.com>
Date: Sun, 30 Dec 2018 22:07:23 +0900
Subject: [PATCH 1/6] network: do not ignore errors on
 link_request_set_neighbors() and link_set_routing_policy()

---
 src/network/networkd-link.c | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/src/network/networkd-link.c b/src/network/networkd-link.c
index cadf7f8b0be..589a016314c 100644
--- a/src/network/networkd-link.c
+++ b/src/network/networkd-link.c
@@ -866,7 +866,9 @@ static int link_request_set_routes(Link *link) {
 
         link_set_state(link, LINK_STATE_CONFIGURING);
 
-        (void) link_set_routing_policy_rule(link);
+        r = link_set_routing_policy_rule(link);
+        if (r < 0)
+                return r;
 
         /* First add the routes that enable us to talk to gateways, then add in the others that need a gateway. */
         for (phase = 0; phase < _PHASE_MAX; phase++)
@@ -1079,7 +1081,9 @@ static int link_request_set_addresses(Link *link) {
 
         link_set_state(link, LINK_STATE_CONFIGURING);
 
-        link_request_set_neighbors(link);
+        r = link_request_set_neighbors(link);
+        if (r < 0)
+                return r;
 
         LIST_FOREACH(addresses, ad, link->network->static_addresses) {
                 r = address_configure(ad, link, address_handler, false);
@@ -1216,7 +1220,7 @@ static int link_request_set_addresses(Link *link) {
 
                                 return 0;
                         }
-                }    
+                }
 
                 log_link_debug(link, "Offering DHCPv4 leases");
         }

From f4e7d79ab7ef2d1689e566eac8f11d709aed0c5d Mon Sep 17 00:00:00 2001
From: Yu Watanabe <watanabe.yu+github@gmail.com>
Date: Sun, 30 Dec 2018 22:10:32 +0900
Subject: [PATCH 2/6] network: rename link_set_routing_policy_rule() to
 link_request_set_routing_policy_rule()

For consistency to other functions.
---
 src/network/networkd-link.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/network/networkd-link.c b/src/network/networkd-link.c
index 589a016314c..e529111171e 100644
--- a/src/network/networkd-link.c
+++ b/src/network/networkd-link.c
@@ -787,7 +787,7 @@ void link_check_ready(Link *link) {
         return;
 }
 
-static int link_set_routing_policy_rule(Link *link) {
+static int link_request_set_routing_policy_rule(Link *link) {
         RoutingPolicyRule *rule, *rrule = NULL;
         int r;
 
@@ -866,7 +866,7 @@ static int link_request_set_routes(Link *link) {
 
         link_set_state(link, LINK_STATE_CONFIGURING);
 
-        r = link_set_routing_policy_rule(link);
+        r = link_request_set_routing_policy_rule(link);
         if (r < 0)
                 return r;
 

From 20be137790ac631c13bffa51fb3b10411834c9df Mon Sep 17 00:00:00 2001
From: Yu Watanabe <watanabe.yu+github@gmail.com>
Date: Sun, 30 Dec 2018 22:08:10 +0900
Subject: [PATCH 3/6] network: set *_configured flags to false before
 requesting addresses or freinds

---
 src/network/networkd-link.c | 15 +++++++++++++--
 1 file changed, 13 insertions(+), 2 deletions(-)

diff --git a/src/network/networkd-link.c b/src/network/networkd-link.c
index e529111171e..5f71830301e 100644
--- a/src/network/networkd-link.c
+++ b/src/network/networkd-link.c
@@ -794,6 +794,9 @@ static int link_request_set_routing_policy_rule(Link *link) {
         assert(link);
         assert(link->network);
 
+        link_set_state(link, LINK_STATE_CONFIGURING);
+        link->routing_policy_rules_configured = false;
+
         LIST_FOREACH(rules, rule, link->network->rules) {
                 r = routing_policy_rule_get(link->manager, rule->family, &rule->from, rule->from_prefixlen, &rule->to,
                                             rule->to_prefixlen, rule->tos, rule->fwmark, rule->table, rule->iif, rule->oif,
@@ -865,6 +868,7 @@ static int link_request_set_routes(Link *link) {
         assert(link->state != _LINK_STATE_INVALID);
 
         link_set_state(link, LINK_STATE_CONFIGURING);
+        link->static_routes_configured = false;
 
         r = link_request_set_routing_policy_rule(link);
         if (r < 0)
@@ -905,6 +909,7 @@ static int link_request_set_neighbors(Link *link) {
         assert(link->state != _LINK_STATE_INVALID);
 
         link_set_state(link, LINK_STATE_CONFIGURING);
+        link->neighbors_configured = false;
 
         LIST_FOREACH(neighbors, neighbor, link->network->neighbors) {
                 r = neighbor_configure(neighbor, link, NULL);
@@ -1075,12 +1080,18 @@ static int link_request_set_addresses(Link *link) {
         assert(link->network);
         assert(link->state != _LINK_STATE_INVALID);
 
+        link_set_state(link, LINK_STATE_CONFIGURING);
+
+        /* Set false to all *_configured state we are configuring. */
+        link->addresses_configured = false;
+        link->neighbors_configured = false;
+        link->static_routes_configured = false;
+        link->routing_policy_rules_configured = false;
+
         r = link_set_bridge_fdb(link);
         if (r < 0)
                 return r;
 
-        link_set_state(link, LINK_STATE_CONFIGURING);
-
         r = link_request_set_neighbors(link);
         if (r < 0)
                 return r;

From a912ab5e2a71a15b88bd979bd5ea41f555e84d14 Mon Sep 17 00:00:00 2001
From: Yu Watanabe <watanabe.yu+github@gmail.com>
Date: Wed, 26 Dec 2018 23:16:20 +0100
Subject: [PATCH 4/6] test: fix neighbor address

---
 test/test-network/systemd-networkd-tests.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/test/test-network/systemd-networkd-tests.py b/test/test-network/systemd-networkd-tests.py
index 19572be1514..1574527aebf 100755
--- a/test/test-network/systemd-networkd-tests.py
+++ b/test/test-network/systemd-networkd-tests.py
@@ -795,7 +795,7 @@ def test_ipv6_neighbor(self):
         output = subprocess.check_output(['ip', 'neigh', 'list']).rstrip().decode('utf-8')
         print(output)
         self.assertRegex(output, '192.168.10.1.*00:00:5e:00:02:65.*PERMANENT')
-        self.assertRegex(output, '2004:da8:1:0::1.*00:00:5e:00:02:66.*PERMANENT')
+        self.assertRegex(output, '2004:da8:1::1.*00:00:5e:00:02:66.*PERMANENT')
 
     def test_sysctl(self):
         self.copy_unit_to_networkd_unit_path('25-sysctl.network', '12-dummy.netdev')

From fdb06ec07e587a19d73fa21860a8182cc27421de Mon Sep 17 00:00:00 2001
From: Yu Watanabe <watanabe.yu+github@gmail.com>
Date: Wed, 26 Dec 2018 23:30:35 +0100
Subject: [PATCH 5/6] test-network: drop unused variable

---
 test/test-network/systemd-networkd-tests.py | 1 -
 1 file changed, 1 deletion(-)

diff --git a/test/test-network/systemd-networkd-tests.py b/test/test-network/systemd-networkd-tests.py
index 1574527aebf..342a4e283a3 100755
--- a/test/test-network/systemd-networkd-tests.py
+++ b/test/test-network/systemd-networkd-tests.py
@@ -20,7 +20,6 @@
 network_sysctl_ipv6_path='/proc/sys/net/ipv6/conf'
 network_sysctl_ipv4_path='/proc/sys/net/ipv4/conf'
 
-dnsmasq_config_file='/run/networkd-ci/test-dnsmasq.conf'
 dnsmasq_pid_file='/run/networkd-ci/test-test-dnsmasq.pid'
 dnsmasq_log_file='/run/networkd-ci/test-dnsmasq-log-file'
 

From d0a0124cbd57c30f6cdf2bf006ab4fc72cefaf0c Mon Sep 17 00:00:00 2001
From: Yu Watanabe <watanabe.yu+github@gmail.com>
Date: Wed, 26 Dec 2018 23:31:26 +0100
Subject: [PATCH 6/6] test-network: disable DNS function of dnsmasq

---
 test/test-network/systemd-networkd-tests.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/test/test-network/systemd-networkd-tests.py b/test/test-network/systemd-networkd-tests.py
index 342a4e283a3..5586767f464 100755
--- a/test/test-network/systemd-networkd-tests.py
+++ b/test/test-network/systemd-networkd-tests.py
@@ -100,7 +100,7 @@ def remove_unit_from_networkd_path(self, units):
                     shutil.rmtree(os.path.join(network_unit_file_path, unit + '.d'))
 
     def start_dnsmasq(self):
-        subprocess.check_call('dnsmasq -8 /var/run/networkd-ci/test-dnsmasq-log-file --log-queries=extra --log-dhcp --pid-file=/var/run/networkd-ci/test-test-dnsmasq.pid --conf-file=/dev/null --interface=veth-peer --enable-ra --dhcp-range=2600::10,2600::20 --dhcp-range=192.168.5.10,192.168.5.200 -R --dhcp-leasefile=/var/run/networkd-ci/lease --dhcp-option=26,1492 --dhcp-option=option:router,192.168.5.1 --dhcp-option=33,192.168.5.4,192.168.5.5', shell=True)
+        subprocess.check_call('dnsmasq -8 /var/run/networkd-ci/test-dnsmasq-log-file --log-queries=extra --log-dhcp --pid-file=/var/run/networkd-ci/test-test-dnsmasq.pid --conf-file=/dev/null --interface=veth-peer --enable-ra --dhcp-range=2600::10,2600::20 --dhcp-range=192.168.5.10,192.168.5.200 -R --dhcp-leasefile=/var/run/networkd-ci/lease --dhcp-option=26,1492 --dhcp-option=option:router,192.168.5.1 --dhcp-option=33,192.168.5.4,192.168.5.5 --port=0', shell=True)
 
         time.sleep(10)
 
